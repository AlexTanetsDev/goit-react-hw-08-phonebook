{"version":3,"file":"static/js/567.bca3d961.chunk.js","mappings":"sNAAaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACtBC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EACvBC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAnB,E,6BCAnBC,EAAUC,EAAAA,GAAAA,IAAH,oK,UCCPC,GAAeD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,+JAWZG,EAAYH,EAAAA,GAAAA,MAAH,uF,oBCRhBI,EAASC,EAAAA,KAAaC,MAAM,CAC9BC,KAAMF,EAAAA,KAAaG,WACnBC,OAAQJ,EAAAA,KAAaG,WAAWE,WAAWC,YAGzCC,EAAgB,CAClBL,KAAM,GACNE,OAAQ,IAKCI,EAAc,WAEvB,IAAMC,GAAWC,EAAAA,EAAAA,MAOjB,OAEI,SAAC,KAAD,CAAQH,cAAeA,EAAeI,iBAAkBZ,EAAQa,SAN/C,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC5BL,GAASM,EAAAA,EAAAA,IAAWF,IACpBC,GACH,EAGG,UACI,UAAClB,EAAD,CAAcoB,aAAa,MAA3B,WACI,UAAClB,EAAD,CAAWmB,QAAQ,OAAnB,kBACI,SAAC,KAAD,CAAOC,KAAK,OAAOhB,KAAK,UACxB,SAAC,KAAD,CAAcA,KAAK,OAAOiB,UAAU,YAGxC,UAACrB,EAAD,CAAWmB,QAAQ,SAAnB,oBACI,SAAC,KAAD,CAAOC,KAAK,MAAMhB,KAAK,YACvB,SAAC,KAAD,CAAcA,KAAK,SAASiB,UAAU,YAE1C,mBAAQD,KAAK,SAAb,6BAKf,E,oBCxCYE,EAAS,WAElB,IAAMX,GAAWC,EAAAA,EAAAA,MACjB,GAAsCW,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAUA,OACI,UAACzB,EAAD,oCACI,kBAAOoB,KAAK,OAAOM,MAAOF,EAAcG,SAVrB,SAAAC,GACvB,IAAMF,EAAQE,EAAEC,OAAOH,MACvBD,EAAeC,GAEff,GAASmB,EAAAA,EAAAA,IAAUJ,GAC1B,MAQA,ECpBYK,EAAOlC,EAAAA,GAAAA,GAAH,2FAOJmC,EAAcnC,EAAAA,GAAAA,GAAH,sHCHXoC,EAAc,WACvB,IAAM3C,GAAW4C,EAAAA,EAAAA,IAAY9C,GACvB+C,GAASD,EAAAA,EAAAA,IAAYE,EAAAA,IACrBzB,GAAWC,EAAAA,EAAAA,MAcjB,OACI,SAACmB,EAAD,UANGzC,EAAS6C,QAAO,SAAAE,GAAO,OAAIA,EAAQjC,KAAKkC,cAAcC,SAASJ,EAAOG,cAA/C,IAOAE,KAAI,SAAAC,GACtB,IAAQC,EAAoBD,EAApBC,GAAItC,EAAgBqC,EAAhBrC,KAAME,EAAUmC,EAAVnC,OAClB,OAAO,UAAC0B,EAAD,YACH,yBAAI5B,EAAJ,MAAaE,MACb,mBAAQc,KAAK,SAASuB,QAAS,kBAjB3B,SAACD,GACjB/B,GAASiC,EAAAA,EAAAA,IAAcF,GAC1B,CAeoDG,CAAYH,EAAlB,EAA/B,sBAFqBA,EAI5B,KAGZ,ECzBc,SAASI,IACtB,IAAMxD,GAAW4C,EAAAA,EAAAA,IAAY9C,GACvBK,GAAYyC,EAAAA,EAAAA,IAAY1C,GACxBG,GAAQuC,EAAAA,EAAAA,IAAYxC,GAEhBiB,GAAWC,EAAAA,EAAAA,MAQnB,OALFmC,EAAAA,EAAAA,YAAU,WACRpC,GAASqC,EAAAA,EAAAA,MACV,GAAE,CAACrC,KAIE,UAACf,EAAD,YACI,uCACA,SAACc,EAAD,KAEA,wBAAyB,IAApBpB,EAAS2D,OAAe,2CAA6C,aACzE3D,EAAS2D,OAAS,IAAK,SAAC3B,EAAD,IACvB7B,IAAcE,IAAS,kDACH,IAApBL,EAAS2D,SAAgB,SAAChB,EAAD,MAKrC,C","sources":["Redux/contacts/selectors.js","components/wrapper.styled.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","Pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsloading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    width: 500px;\nmargin: 10px auto;\npadding: 20px 15px;\nbackground-color: #d6d6d6;\ndisplay: flex;\nflex-direction: column;\ngap: 8px;\n`","import styled from \"styled-components\";\nimport {Form} from \"formik\"\n\nexport const ContactsForm = styled(Form)`\n  \n    border-radius: 5px;\n\n    display: flex;\n flex-direction: column;\n background-color: #ddfafa;\n padding: 10px;\n gap: 8px;\n`;\n\nexport const FormLabel = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap:5px;\n`\n","import { Formik, Field, ErrorMessage } from \"formik\"\nimport { ContactsForm, FormLabel } from \"./ContactForm.styled\";\nimport * as yup from 'yup';\nimport { useDispatch } from \"react-redux\";\nimport { addContact } from \"Redux/contacts/operations\";\n\nconst schema = yup.object().shape({\n    name: yup.string().required(),\n    number: yup.number().required().positive().integer(),\n});\n\nconst initialValues = {\n    name: \"\",\n    number: \"\"\n};\n\n\n\nexport const ContactForm = () => {\n\n    const dispatch = useDispatch();\n\n\n    const hendleSubmit = (values, { resetForm }) => {\n        dispatch(addContact(values))\n        resetForm();\n    }\n    return (\n      \n        <Formik initialValues={initialValues} validationSchema={schema} onSubmit={hendleSubmit}>\n            <ContactsForm autoComplete=\"off\">\n                <FormLabel htmlFor=\"name\">Name\n                    <Field type=\"text\" name=\"name\" />\n                    <ErrorMessage name=\"name\" component=\"div\" />\n                </FormLabel>\n                \n                <FormLabel htmlFor=\"number\">Number\n                    <Field type=\"tel\" name=\"number\"/>\n                    <ErrorMessage name=\"number\" component=\"div\" />\n                </FormLabel>\n                <button type=\"submit\">Add contact</button>\n            </ContactsForm>\n        </Formik>\n    )\n\n};\n\n\n","import { FormLabel } from \"components/ContactForm/ContactForm.styled\"\nimport { useDispatch } from \"react-redux\";\nimport { setFilter } from \"Redux/filterSlice\";\nimport { useState } from \"react\";\n\nexport const Filter = () => {\n\n    const dispatch = useDispatch();\n    const [filterValue, setFilterValue] = useState(\"\");\n     \n    const handleFilterChange = e => {\n        const value = e.target.value;\n        setFilterValue(value);\n\n        dispatch(setFilter(value));\n}\n    \n\n    return (\n        <FormLabel>Find contacts by name\n            <input type=\"text\" value={filterValue}  onChange={ handleFilterChange } />\n        </FormLabel>\n    )\n}\n\n","import styled from \"styled-components\";\n\n\nexport const List = styled.ul`\npadding:10px;\ndisplay:flex;\nflex-direction: column;\ngap: 10px;\n`\n\nexport const ContactItem = styled.li`\n    display: flex;\njustify-content: space-between;\n\nfont-size: 20px;\nfont-weight: 500;\n\n`","import { useDispatch, useSelector } from \"react-redux\";\nimport { ContactItem, List } from \"./ContactList.styled\";\nimport { selectContacts } from \"Redux/contacts/selectors\";\nimport { selectFilter } from \"Redux/filterSlice\";\nimport { deleteContact } from \"Redux/contacts/operations\";\n\n\nexport const ContactList = () => {\n    const contacts = useSelector(selectContacts);\n    const filter = useSelector(selectFilter);\n    const dispatch = useDispatch();\n\n\n    const handleClick = (id) => {\n        dispatch(deleteContact(id));\n    }\n\n    const getVisibleContacts = () => {\n\n    return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase())); \n\n\n    }\n    \n    return (\n        <List>\n            {getVisibleContacts().map(visibleContact => {\n                const { id, name, number} = visibleContact;\n                return <ContactItem key={id}>\n                    <p>{name} : {number}</p>\n                    <button type=\"button\" onClick={() => handleClick(id)}>Delete</button>\n                </ContactItem>\n            })}\n        </List>\n    )\n}\n","import { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { selectContacts, selectIsloading, selectError } from \"Redux/contacts/selectors\";\nimport { fetchContacts } from \"Redux/contacts/operations\";\nimport { Wrapper } from \"components/wrapper.styled\";\nimport { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { ContactList } from \"components/ContactList/ContactList\";\n\n\nexport default function Contacts() {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsloading);\n  const error = useSelector(selectError);\n\n      const dispatch = useDispatch();\n\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n\n    return (\n        <Wrapper>\n            <h1>Phonebook</h1>\n            <ContactForm />\n\n            <h2>{contacts.length === 0 ? 'Here will be your contacts. Add contacts' : 'Contacts'}</h2>\n            {contacts.length > 1 && <Filter />}\n            {isLoading && !error && <b>Request in progress...</b>}\n            {contacts.length !== 0 && <ContactList />}\n        </Wrapper>\n\n    );\n\n};\n\n\n\n\n\n\n"],"names":["selectContacts","state","contacts","items","selectIsloading","isLoading","selectError","error","Wrapper","styled","ContactsForm","Form","FormLabel","schema","yup","shape","name","required","number","positive","integer","initialValues","ContactForm","dispatch","useDispatch","validationSchema","onSubmit","values","resetForm","addContact","autoComplete","htmlFor","type","component","Filter","useState","filterValue","setFilterValue","value","onChange","e","target","setFilter","List","ContactItem","ContactList","useSelector","filter","selectFilter","contact","toLowerCase","includes","map","visibleContact","id","onClick","deleteContact","handleClick","Contacts","useEffect","fetchContacts","length"],"sourceRoot":""}