{"version":3,"file":"static/js/203.bd8dd3db.chunk.js","mappings":"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","sources":["components/wrapper.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","Pages/Contacts.jsx","Redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactForm/ContactForm.styled.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    width: 500px;\nmargin: 10px auto;\npadding: 20px 15px;\nbackground-color: #d6d6d6;\ndisplay: flex;\nflex-direction: column;\ngap: 8px;\n`","import { FormLabel } from \"components/ContactForm/ContactForm.styled\"\nimport { useDispatch } from \"react-redux\";\nimport { setFilter } from \"Redux/filterSlice\";\nimport { useState } from \"react\";\n\nexport const Filter = () => {\n\n    const dispatch = useDispatch();\n    const [filterValue, setFilterValue] = useState(\"\");\n     \n    const handleFilterChange = e => {\n        const value = e.target.value;\n        setFilterValue(value);\n\n        dispatch(setFilter(value));\n}\n    \n\n    return (\n        <FormLabel>Find contacts by name\n            <input type=\"text\" value={filterValue}  onChange={ handleFilterChange } />\n        </FormLabel>\n    )\n}\n\n","import styled from \"styled-components\";\n\n\nexport const List = styled.ul`\npadding:10px;\ndisplay:flex;\nflex-direction: column;\ngap: 10px;\n`\n\nexport const ContactItem = styled.li`\n    display: flex;\njustify-content: space-between;\n\nfont-size: 20px;\nfont-weight: 500;\n\n`","import { useDispatch, useSelector } from \"react-redux\";\nimport { ContactItem, List } from \"./ContactList.styled\";\nimport { selectContacts } from \"Redux/contacts/selectors\";\nimport { selectFilter } from \"Redux/filterSlice\";\nimport { deleteContact } from \"Redux/contacts/operations\";\n\n\nexport const ContactList = () => {\n    const contacts = useSelector(selectContacts);\n    const filter = useSelector(selectFilter);\n    const dispatch = useDispatch();\n\n\n    const handleClick = (id) => {\n        dispatch(deleteContact(id));\n    }\n\n    const getVisibleContacts = () => {\n\n    return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase())); \n\n\n    }\n    \n    return (\n        <List>\n            {getVisibleContacts().map(visibleContact => {\n                const { id, name, number} = visibleContact;\n                return <ContactItem key={id}>\n                    <p>{name} : {number}</p>\n                    <button type=\"button\" onClick={() => handleClick(id)}>Delete</button>\n                </ContactItem>\n            })}\n        </List>\n    )\n}\n","import { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { selectContacts, selectIsloading, selectError } from \"Redux/contacts/selectors\";\nimport { fetchContacts } from \"Redux/contacts/operations\";\nimport { Wrapper } from \"components/wrapper.styled\";\nimport { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { ContactList } from \"components/ContactList/ContactList\";\n\n\nexport default function Contacts() {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsloading);\n  const error = useSelector(selectError);\n\n      const dispatch = useDispatch();\n\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n\n    return (\n        <Wrapper>\n            <h1>Phonebook</h1>\n            <ContactForm />\n\n            <h2>{contacts.length === 0 ? 'Here will be your contacts. Add contacts' : 'Contacts'}</h2>\n            {contacts.length > 1 && <Filter />}\n            {isLoading && !error && <b>Request in progress...</b>}\n            {contacts.length !== 0 && <ContactList />}\n        </Wrapper>\n\n    );\n\n};\n\n\n\n\n\n\n","export const selectContacts = state => state.contacts.items;\nexport const selectIsloading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;","import { Formik, ErrorMessage } from \"formik\"\nimport { ContactsForm, FormLabel, StyledField, SubmitButton } from \"./ContactForm.styled\";\nimport * as yup from 'yup';\nimport { useDispatch } from \"react-redux\";\nimport { addContact } from \"Redux/contacts/operations\";\n\nconst schema = yup.object().shape({\n    name: yup.string().required(),\n    number: yup.number().required().positive().integer(),\n});\n\nconst initialValues = {\n    name: \"\",\n    number: \"\"\n};\n\n\n\nexport const ContactForm = () => {\n\n    const dispatch = useDispatch();\n\n\n    const hendleSubmit = (values, { resetForm }) => {\n        dispatch(addContact(values))\n        resetForm();\n    }\n    return (\n      \n        <Formik initialValues={initialValues} validationSchema={schema} onSubmit={hendleSubmit}>\n            <ContactsForm autoComplete=\"off\">\n                <FormLabel htmlFor=\"name\">Name\n                    <StyledField type=\"text\" name=\"name\" />\n                    <ErrorMessage name=\"name\" component=\"div\" />\n                </FormLabel>\n                \n                <FormLabel htmlFor=\"number\">Number\n                    <StyledField type=\"tel\" name=\"number\"/>\n                    <ErrorMessage name=\"number\" component=\"div\" />\n                </FormLabel>\n                <SubmitButton type=\"submit\">Add contact</SubmitButton>\n            </ContactsForm>\n        </Formik>\n    )\n\n};\n\n\n","import styled from \"styled-components\";\nimport {Field, Form} from \"formik\"\n\nexport const ContactsForm = styled(Form)`\n\ndisplay: flex;\nflex-direction: column;\nbackground-color: #fff;\npadding: 15px;\ngap: 15px;\nalign-items: center;\n\n border-radius: 15px;\n box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n`;\n\nexport const FormLabel = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap:5px;\n\n    font-size: 24px;\n    font-weight: 500;\n`;\n\nexport const StyledField = styled(Field)`\nborder: 1.5px solid black;\nborder-radius: 15px;\noutline: none;\npadding: 2px 10px;\n\n\n`\nexport const SubmitButton= styled.button`\n       text-decoration: none;\n    text-align: center;\n    color: #ffffff;\n    font-weight: 700;\n    font-size: 24px;\n    background-color: #60b8ff;\n    padding: 5px;\n    width: 250px;\n    border-radius: 15px;\n    border: none;\n    outline: none;\n    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n\n    :hover,:focus{\n        background-color: #ec4d1c;\n    }\n\n`"],"names":["Wrapper","styled","Filter","dispatch","useDispatch","useState","filterValue","setFilterValue","type","value","onChange","e","target","setFilter","List","ContactItem","ContactList","contacts","useSelector","selectContacts","filter","selectFilter","contact","name","toLowerCase","includes","map","visibleContact","id","number","onClick","deleteContact","handleClick","Contacts","isLoading","selectIsloading","error","selectError","useEffect","fetchContacts","ContactForm","length","state","items","schema","yup","shape","required","positive","integer","initialValues","validationSchema","onSubmit","values","resetForm","addContact","autoComplete","htmlFor","component","ContactsForm","Form","FormLabel","StyledField","Field","SubmitButton"],"sourceRoot":""}